// Common configuration for all modules

gradle.beforeProject { Project project ->
    resolveDependencyVersions(project)
    configureSubModule(project)
}

def resolveDependencyVersions(Project project) {
    project.with {
        configurations.all {
            resolutionStrategy {
                eachDependency { resolveDependencyVersion(project, it) }
            }
        }
        buildscript {
            configurations.all {
                resolutionStrategy {
                    eachDependency { resolveDependencyVersion(project, it) }
                }
            }
        }
    }
}

def resolveDependencyVersion(Project project, DependencyResolveDetails details) {
    def dep = details.requested

    if (dep.version == null || dep.version.isEmpty()) {
        def depFullName = "${dep.group}:${dep.name}"
        def rootProject = project.rootProject ?: project
        def versions = rootProject.ext.versions
        def version = versions.get(depFullName, versions.get(dep.name, versions.get(dep.group)))

        if (version != null) {
            details.useVersion(version)
        }
    }
}

def configureSubModule(Project project) {
    if (project.name.endsWith('-common')) configureCommonModule(project)
    else if (project.name.endsWith('-server')) configureServerModule(project)
    else if (project.name.endsWith('-web')) configureWebModule(project)
    else if (project.name.endsWith('-db')) configureServerModule(project)
}

def configureCommonModule(Project project) {
    project.with {
        apply plugin: 'kotlin-platform-common'
        apply plugin: 'kotlinx-serialization'
        apply plugin: 'idea'

        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib-common"
            compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common"

            testCompile "org.jetbrains.kotlin:kotlin-test-common"
            testCompile "org.jetbrains.kotlin:kotlin-test-annotations-common"
            testCompile "junit:junit"
        }

        sourceSets {
            main {
                kotlin.srcDirs += 'src/main/kotlin'
                resources.srcDirs += "src/main/resources"
                output.resourcesDir = file("$buildDir/classes/kotlin/main")
            }
            test {
                kotlin.srcDirs += 'src/test/kotlin'
                resources.srcDirs += "src/test/resources"
                output.resourcesDir = file("$buildDir/classes/kotlin/test")
            }
        }

        idea {
            module {
                inheritOutputDirs = false
                outputDir = file("$buildDir/classes/kotlin/main")
                testOutputDir = file("$buildDir/classes/kotlin/test")
            }
        }
    }
}

def configureServerModule(Project project) {
    project.with {
        apply plugin: 'kotlin-platform-jvm'
        apply plugin: 'kotlinx-serialization'
        apply plugin: 'idea'

        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
            compile "org.jetbrains.kotlin:kotlin-reflect"
            compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime"

            testCompile "org.jetbrains.kotlin:kotlin-test-junit"
            testCompile "org.jetbrains.kotlin:kotlin-test"
            testCompile "junit:junit"
        }

        sourceCompatibility = 1.8

        sourceSets {
            main {
                java.srcDirs += 'src/main/java'
                kotlin.srcDirs += 'src/main/kotlin'
                resources.srcDirs += 'src/main/resources'
                output.resourcesDir = file("$buildDir/classes/kotlin/main")
            }
            test {
                java.srcDirs += 'src/test/java'
                kotlin.srcDirs += 'src/test/kotlin'
                resources.srcDirs += 'src/test/resources'
                output.resourcesDir = file("$buildDir/classes/kotlin/test")
            }
        }

        compileKotlin {
            kotlinOptions.jvmTarget = 1.8
        }

        compileTestKotlin {
            kotlinOptions.jvmTarget = 1.8
        }

        idea {
            module {
                inheritOutputDirs = false
                outputDir = file("$buildDir/classes/kotlin/main")
                testOutputDir = file("$buildDir/classes/kotlin/test")
            }
        }

        kotlin {
            experimental {
                coroutines "enable"
            }
        }
    }
}

def configureWebModule(Project project) {
    project.with {
        apply plugin: 'kotlin2js'
        apply plugin: 'kotlin-dce-js'
        apply plugin: 'kotlin-platform-js'
        apply plugin: 'kotlinx-serialization'
        apply plugin: 'idea'

        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib-js"
            compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js"

            testCompile "org.jetbrains.kotlin:kotlin-test-js"
        }

        sourceSets {
            main {
                kotlin.srcDirs += 'src/main/kotlin'
                resources.srcDirs += 'src/main/resources'
                output.resourcesDir = file("$buildDir/classes/kotlin/main")
            }
            test {
                kotlin.srcDirs += 'src/test/kotlin'
                resources.srcDirs += 'src/test/resources'
                output.resourcesDir = file("$buildDir/classes/kotlin/test")
            }
        }

        idea {
            module {
                inheritOutputDirs = false
                outputDir = file("$buildDir/classes/kotlin/main")
                testOutputDir = file("$buildDir/classes/kotlin/test")
            }
        }

        compileKotlin2Js {
            kotlinOptions {
                sourceMap = true
                sourceMapEmbedSources = 'always'
                moduleKind = 'commonjs'
                sourceMapPrefix = "./"
            }
        }

        compileTestKotlin2Js {
            kotlinOptions {
                freeCompilerArgs = ["-Xallow-kotlin-package"]
                sourceMap = true
                sourceMapEmbedSources = 'always'
                moduleKind = 'commonjs'
                metaInfo = false
            }
        }

        kotlin {
            experimental {
                coroutines "enable"
            }
        }
    }
}

/*
gradle.settingsEvaluated { Settings settings ->
    includeModules(settings, ['common', 'web', 'server', 'db'])
}

def includeModules(Settings settings, List<String> names) {

    rootDir.eachDir() { dir ->
        dir.eachDir { subDir ->
            def dirName = dir.name
            def subDirName = subDir.name
            def projectName = ":$dirName-$subDirName"

            if (subDirName in names) {
                settings.include(projectName)
                settings.project(projectName).projectDir = subDir
            }
        }
    }
}
*/